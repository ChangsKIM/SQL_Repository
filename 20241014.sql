--2024. 10. 11. 실습문제 풀이

CREATE TABLE EMPLOYEE2(
	EP_NO VARCHAR2(10) PRIMARY KEY,
	EP_NAME VARCHAR2(50) NOT NULL,
	EP_TITLE VARCHAR2(30) DEFAULT '사원' NOT NULL,
	EP_MAJOR VARCHAR2(50),
	EP_SALRY NUMBER DEFAULT 0 NOT NULL,
	EP_HIRE_DATE DATE DEFAULT SYSDATE
	);
	
SELECT * FROM EMPLOYEE2;

-- 사원정보 샘플 데이터 50건 저장
-- CSV로 만들어 저장

-- Dml(Data Mainpulation Language) ; 데이터 조작어
-- 데이터를 조회, 삭제, 수정, 추가
-- SELECT, DELETE, UPDATE, INSERT

CREATE TABLE NEW_PERSON(
	PNAME CHAR(30),
	PAGE NUMBER(3)
	);

-- INSERT ; 추가
-- INSERT INTO 테이블명(컬럼1, 컬럼2, 컬럼3 ...) 
-- VALUES(데이터 1, 데이터 2, 데이터 3 ....)
-- INSERT INTO 테이블명
-- VALUES(데이터1, 데이터2, 데이터3 ...)
-- 데이블 생성시 만든 모든 컬럼에 데이터를 저장
-- 데이터 순서는 CREATE 작성시 만든 컴럼의 순서대로 작성

-- PERSON 테이블에 데이터 추가
INSERT INTO NEW_PERSON(PNAME, PAGE) VALUES('김창수', 38);
INSERT INTO NEW_PERSON VALUES('정지영', 39);
INSERT INTO NEW_PERSON VALUES('유관순', 19);
INSERT INTO NEW_PERSON VALUES('안중근', 35);
INSERT INTO NEW_PERSON(PNAME, PAGE) VALUES('강감찬', 40);
INSERT INTO NEW_PERSON(PNAME, PAGE) VALUES('홍길동', 25);
INSERT INTO NEW_PERSON(PNAME, PAGE) VALUES('김철수', 15);
INSERT INTO NEW_PERSON(PNAME, PAGE) VALUES('이영희', 43);
INSERT INTO NEW_PERSON(PNAME, PAGE) VALUES('박영순', 22);

--여러 개를 한번에 삽입하는 방법
INSERT ALL
	INTO NEW_PERSON VALUES('최민수', 28)
	INTO NEW_PERSON VALUES('강호동', 50)
	INTO NEW_PERSON VALUES('유재석', 48)
SELECT * FROM DUAL;
	
-- 학생 데이터 한건 추가하는 INSERT문 작성
INSERT INTO STUDENT VALUES(STD_NO, STD_NAME, MAJOR_NAME ,SCORE)
VALUES('20230051', '정정예', '양성반', 4.3);
-- 사원정보 1건 등록하는 INSERT문 작성 ; 입사일 제외하고 추가
INSERT INTO EMPLOYEE2 (EP_NO, EP_NAME, EP_TITLE, EP_MAJOR, EP_SALRY, EP_HIRE_DATE)
VALUES('A20231151','정정예','과장','개발부', 48000000, '');
-- 사원정보 1건 등록하는 INSERT문 작성 ; 모든 항목 추가
INSERT INTO EMPLOYEE2 (EP_NO, EP_NAME, EP_TITLE, EP_MAJOR, EP_SALRY, EP_HIRE_DATE)
VALUES('A20231152','이범식','부장','인사부', 68000000, '2013-04-01');

-- 데이터 조회 ; SELECT
-- SELECT 조회할 컬럼1, 조회할 컬럼2, ...
-- FROM 조회할 테이블1, 조회할 테이블2, ...
-- WHERE 조건절
-- GROUP BY 그룹으로 묶을 컬럼1, 그룹으로 묶을 컬럼2, ... [HAVING 조건절]
-- ORDER BY 정렬할 기준 컬럼1 [ASC | DESC], 정렬할 기준 컬럼2 [ASC | DESC], ... 


-- SELECT 테이블 데이터 전체 조회
SELECT * FROM PERSON;
-- 컬럼 조회
SELECT EP_NO, EP_NAME FROM EMPLOYEE;
-- 컴럼 조회 ; 컬럼 이름 변환해서 조회
SELECT EP_NO AS 사원번호, EP_NAME AS 사원이름 FROM EMPLOYEE;
-- 학생 테이블에서 학과명만 조회(중복 제거 ; DISTINCT)
SELECT DISTINCT MAJOR_NAME AS 학과명 FROM STUDENT;


-- 조건절
-- 관계 연산자 ; >, <, <=, >=, =, <>
-- 논리 연산자 ; NOT AND OR

-- NEW_PRESON 테이블 나이가 30이상/30이하인 사람 조회
SELECT * FROM NEW_PERSON WHERE PAGE > 30;
SELECT * FROM NEW_PERSON WHERE PAGE < 30;

-- NEW_PERSON 테이블 ; 나이가 30이 아닌 사람
SELECT * FROM NEW_PERSON WHERE PAGE <> 30;
SELECT * FROM NEW_PERSON WHERE PAGE != 30;

-- NEW_PERSON 테이블 ; 나이가 30대인 사람
SELECT * FROM NEW_PERSON WHERE PAGE > 29 AND PAGE < 40;
SELECT * FROM NEW_PERSON WHERE PAGE BETWEEN  30 AND 39; -- 범위 지정 연산
-- NOT 사용
SELECT * FROM NEW_PERSON WHERE NOT PAGE < 30 -- 30이상만 출력

SELECT * FROM NEW_PERSON WHERE PAGE IN(19,35,40);
SELECT * FROM NEW_PERSON WHERE PAGE NOT IN(19,35,40);

SELECT * FROM NEW_PERSON;


-- 문자열 비교
-- = 끝에 있는 공백들을 제거하고 비교
-- LIKE로 비교하면 완전 일치
SELECT * FROM NEW_PERSON WHERE PNAME LIKE '김창수';
SELECT * FROM NEW_PERSON WHERE PNAME = '김창수';

SELECT * FROM STUDENT WHERE STD_NAME = '김창수';
SELECT * FROM STUDENT WHERE STD_NAME LIKE '이%';
SELECT * FROM STUDENT WHERE STD_NAME LIKE '이_';
SELECT * FROM STUDENT WHERE STD_NAME LIKE '이__';

SELECT PNAME ||'-'|| PAGE FROM NEW_PERSON;


-- 학점이 2.5이상 3.5이하 인 학생 목록 조회
SELECT * FROM STUDENT WHERE SCORE >= 2.5 AND 3.5 >= SCORE;

-- 학점이 2.5이상 3.5이하 인 학생 목록 조회 - 경영학만

SELECT * FROM STUDENT WHERE SCORE >= 2.5 AND 3.5 >= SCORE AND MAJOR_NAME LIKE '경영학';

SELECT *FROM STUDENT WHERE SCORE < 3 AND STD_NO LIKE '2023%';

-- 입사일 2023/01/01 ~ 01/03 인 직원 조회
SELECT * FROM EMPLOYEE2 
WHERE EP_HIRE_DATE BETWEEN '20230101' AND '20230103';

-- 데이터 수정 ; UPDATE
-- UPDATE 테이블명 SET WHERE
-- 형식 : UPDATE 테이블명 SET 수정할 컴럼명1 = 수정 값1, 수정할 컬럼명2 = 수정 값2, ….  WHERE 조건절 
-- 사용가능 연산자 : +, -, *, /





























